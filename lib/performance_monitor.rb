# encoding: utf-8
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ü–∞–¥—Ä–∏–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∏—Ö –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

require 'benchmark'

class PerformanceMonitor
  
  def self.log_slow_operation(operation_name, threshold_ms = 1000)
    start_time = Time.now
    start_queries = query_count
    
    result = yield
    
    end_time = Time.now
    end_queries = query_count
    
    execution_time_ms = ((end_time - start_time) * 1000).round(2)
    queries_executed = end_queries - start_queries
    
    if execution_time_ms > threshold_ms
      log_message = "‚ö†Ô∏è  SLOW OPERATION: #{operation_name} took #{execution_time_ms}ms (#{queries_executed} SQL queries)"
      Padrino.logger.warn(log_message)
      puts log_message if Padrino.env != :production
    else
      log_message = "‚úÖ #{operation_name}: #{execution_time_ms}ms (#{queries_executed} queries)"
      Padrino.logger.info(log_message) if Padrino.env == :development
    end
    
    result
  end
  
  def self.log_search_performance(search_term, results_count, execution_time_ms)
    if execution_time_ms > 500 # 500ms –ø–æ—Ä–æ–≥
      Padrino.logger.warn("üîç SLOW SEARCH: '#{search_term}' returned #{results_count} results in #{execution_time_ms}ms")
    else
      Padrino.logger.info("üîç Search: '#{search_term}' -> #{results_count} results (#{execution_time_ms}ms)")
    end
  end
  
  def self.log_catalog_performance(params, results_count, execution_time_ms, cached = false)
    cache_status = cached ? "[CACHED]" : "[DB]"
    subdomain_info = params[:subdomain]&.name || 'unknown'
    
    if execution_time_ms > 1000 # 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Ä–æ–≥
      Padrino.logger.warn("üìã SLOW CATALOG #{cache_status}: #{subdomain_info} returned #{results_count} products in #{execution_time_ms}ms")
    else
      Padrino.logger.info("üìã Catalog #{cache_status}: #{subdomain_info} -> #{results_count} products (#{execution_time_ms}ms)")
    end
  end
  
  private
  
  def self.query_count
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ ActiveRecord
    if defined?(ActiveRecord::Base.connection.query_cache) && ActiveRecord::Base.connection.respond_to?(:query_cache_enabled)
      # –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π ActiveRecord
      ActiveRecord::Base.connection.query_cache.size rescue 0
    else
      # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º 0, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      0
    end
  end
end

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
module PerformanceExtensions
  extend ActiveSupport::Concern
  
  module ClassMethods
    def with_performance_monitoring(operation_name, threshold_ms = 1000)
      PerformanceMonitor.log_slow_operation(operation_name, threshold_ms) { yield }
    end
  end
end

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ ActiveRecord –º–æ–¥–µ–ª—è–º
ActiveRecord::Base.include(PerformanceExtensions) if defined?(ActiveRecord::Base)
