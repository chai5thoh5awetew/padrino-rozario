#!/usr/bin/env ruby
# encoding: utf-8
# –°–ö–†–ò–ü–¢ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

require 'rubygems'
require 'bundler/setup'
require './config/boot.rb'
require 'benchmark'

class PerformanceTest
  def initialize
    puts "üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô –†–æ–∑–∞—Ä–∏–æ.–¶–≤–µ—Ç—ã"
    puts "="*80
  end
  
  def test_smiles_search
    puts "üîç –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ smiles (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)"
    
    unless Smile.count > 0
      puts "‚ö†Ô∏è  –ù–µ—Ç smiles –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ—Å—Ç–∞"
      return
    end
    
    search_term = "—Ä–æ–∑"
    
    # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - Smile.all (catastrophic)
    puts "üî¥ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (Smile.all):"
    old_time = Benchmark.measure do
      @old_results = Smile.all.select do |smile|
        next false if smile.json_order.blank?
        
        begin
          json_data = JSON.parse(smile.json_order)
          json_data['title']&.include?(search_term) || 
          json_data['name']&.include?(search_term)
        rescue JSON::ParserError
          false
        end
      end
    end
    
    puts "   ‚è±Ô∏è  –í—Ä–µ–º—è: #{old_time.real.round(3)} —Å–µ–∫"
    puts "   üìä –ù–∞–π–¥–µ–Ω–æ: #{@old_results.size} smiles"
    puts "   üíæ –ó–∞–ø—Ä–æ—Å–æ–≤: #{Smile.count} (–≤—Å–µ smiles –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å)"
    
    # –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    puts "üîç –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (SQL LIKE):"
    new_time = Benchmark.measure do
      @new_results = Smile.where("json_order LIKE ?", "%#{search_term}%")
                         .limit(100)
                         .to_a
    end
    
    puts "   ‚è±Ô∏è  –í—Ä–µ–º—è: #{new_time.real.round(3)} —Å–µ–∫"
    puts "   üìä –ù–∞–π–¥–µ–Ω–æ: #{@new_results.size} smiles"
    puts "   üíæ –ó–∞–ø—Ä–æ—Å–æ–≤: 1 (—Ç–æ–ª—å–∫–æ SQL LIKE)"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    speedup = old_time.real / new_time.real
    puts "‚ö° –£–õ–£–ß–®–ï–ù–ò–ï: #{speedup.round(1)}x –±—ã—Å—Ç—Ä–µ–µ!"
    puts
  end
  
  def test_product_search
    puts "üîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)"
    
    unless Product.count > 0
      puts "‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ—Å—Ç–∞"
      return
    end
    
    search_term = "—Ä–æ–∑"
    
    # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - Product.all (catastrophic)
    puts "üî¥ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (Product.all):"
    old_time = Benchmark.measure do
      @old_products = Product.all.select do |product|
        product.title&.include?(search_term) || 
        product.header&.include?(search_term) ||
        product.keywords&.include?(search_term)
      end
    end
    
    puts "   ‚è±Ô∏è  –í—Ä–µ–º—è: #{old_time.real.round(3)} —Å–µ–∫"
    puts "   üìä –ù–∞–π–¥–µ–Ω–æ: #{@old_products.size} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    puts "   üíæ –ó–∞–ø—Ä–æ—Å–æ–≤: #{Product.count} (–≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã)"
    
    # –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    puts "üîç –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (search_optimized):"
    new_time = Benchmark.measure do
      @new_products = Product.search_optimized(search_term, 50)
    end
    
    puts "   ‚è±Ô∏è  –í—Ä–µ–º—è: #{new_time.real.round(3)} —Å–µ–∫"
    puts "   üìä –ù–∞–π–¥–µ–Ω–æ: #{@new_products.size} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    puts "   üíæ –ó–∞–ø—Ä–æ—Å–æ–≤: 1 (—Ç–æ–ª—å–∫–æ SQL —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏)"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if old_time.real > 0 && new_time.real > 0
      speedup = old_time.real / new_time.real
      puts "‚ö° –£–õ–£–ß–®–ï–ù–ò–ï: #{speedup.round(1)}x –±—ã—Å—Ç—Ä–µ–µ!"
    end
    puts
  end
  
  def test_catalog_performance
    puts "üìã –¢–µ—Å—Ç 3: –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (get_catalog)"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—É–±–¥–æ–º–µ–Ω –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    subdomain = Subdomain.first
    subdomain_pool = SubdomainPool.first 
    category = Category.first
    
    unless subdomain && subdomain_pool && category
      puts "‚ö†Ô∏è  –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"
      return 
    end
    
    puts "üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ (get_catalog_optimized):"
    
    catalog_time = Benchmark.measure do
      @catalog_results = Product.get_catalog_optimized(
        subdomain, 
        subdomain_pool, 
        [category],
        nil, # tags
        0,   # min_price
        100000, # max_price
        'price_asc', # sort_by
        20,  # limit
        0    # offset
      )
    end
    
    puts "   ‚è±Ô∏è  –í—Ä–µ–º—è: #{catalog_time.real.round(3)} —Å–µ–∫"
    puts "   üìä –ù–∞–π–¥–µ–Ω–æ: #{@catalog_results.size} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    puts "   üìã –ü–æ–ª–æ–∂–µ–Ω –≤ –∫—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç"
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º –∏–∑-–∑–∞ –∫—ç—à–∞)
    puts "üíæ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ (–∏–∑ –∫—ç—à–∞):"
    
    cached_time = Benchmark.measure do
      @cached_results = Product.get_catalog_optimized(
        subdomain,
        subdomain_pool,
        [category], 
        nil,
        0,
        100000,
        'price_asc',
        20,
        0
      )
    end
    
    puts "   ‚è±Ô∏è  –í—Ä–µ–º—è: #{cached_time.real.round(3)} —Å–µ–∫"
    puts "   ‚ö° –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç: #{(catalog_time.real / cached_time.real).round(1)}x –±—ã—Å—Ç—Ä–µ–µ!"
    puts
  end
  
  def check_indexes
    puts "üìä –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    critical_indexes = [
      ['smiles', 'idx_smiles_json_order'],
      ['smiles', 'idx_smiles_created_at'], 
      ['products', 'idx_products_title'],
      ['products', 'idx_products_header'],
      ['products', 'idx_products_fulltext'],
      ['categories', 'idx_categories_title']
    ]
    
    puts "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤:"
    
    critical_indexes.each do |table, index_name|
      begin
        result = ActiveRecord::Base.connection.execute(
          "SHOW INDEX FROM #{table} WHERE Key_name = '#{index_name}'"
        )
        
        if result.any?
          puts "   ‚úÖ #{index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ #{table}"
        else
          puts "   ‚ùå #{index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ #{table} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
        end
      rescue => e
        puts "   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ #{index_name}: #{e.message}"
      end
    end
    puts
  end
  
  def run_all_tests
    check_indexes
    test_smiles_search
    test_product_search 
    test_catalog_performance
    
    puts "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!"
    puts "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é 'rake db:migrate' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤"
  end
end

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __FILE__ == $0
  begin
    PerformanceTest.new.run_all_tests
  rescue => e
    puts "‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: #{e.message}"
    puts e.backtrace.first(5)
  end
end
