- # encoding: utf-8
- @title = "Отзывы клиентов | Доставка цветов №1 " + @subdomain.city

/ see also
/ https://github.com/ambethia/recaptcha
/ https://github.com/ambethia/recaptcha/blob/master/demo/sinatra/server.rb

%div.hidden-xs.hidden-sm{style:"height: 42px"}
#comment-form
  %h1{:style => "font-size: 20px;"}=@seo[:h1].html_safe
  %h2 Оставьте Ваш отзыв
  
  - user_authenticated = current_account || session[:user_id]
  - if user_authenticated
    - auth_user = current_account || (session[:user_id] ? UserAccount.find(session[:user_id]) : nil)
    -form_tag url(:feedback, :submit), :method => 'post', :class => 'form comment', :id => 'FORM' do |f|
      = flash_tag(:notice)
      = flash_tag(:error)
      %input{type: "hidden", name: "g-recaptcha-response"}
      -# Поля имени и email убраны, данные берутся из авторизации
      .row.a2
        .col-md-12
          - field_set_tag do
            = label_tag :order_eight_digit_id, :caption => 'Номер заказа *'
            - if @user_orders && !@user_orders.empty?
              %select{:name => 'order_eight_digit_id', :id => 'FORM_ORDER_ID', :required => true}
                %option{:value => '', :disabled => true, :selected => true} -- Выберите заказ --
                - @user_orders.each do |order|
                  %option{:value => order.first, :selected => (params[:order_eight_digit_id] == order.first)} Заказ № #{order.first} от #{order.last.strftime('%d.%m.%Y')}
            - else
              = text_field_tag :order_eight_digit_id, :value => params[:order_eight_digit_id], :placeholder => 'Например: 12345678', :pattern => '[0-9]{8}', :title => '8-значный номер заказа', :id => 'FORM_ORDER_ID', :required => true
            %small.help-block 
              - if @user_orders && !@user_orders.empty?
                Выберите заказ для оставления отзыва
              - else
                Введите 8-значный номер вашего заказа
      .row.a3
        .col-md-12
          = partial("partials/snd-rating", :engine => :erb)
      .row.b
        .col-md-12
          - field_set_tag do
            = label_tag :msg, :caption => 'Ваш отзыв'
            = text_area_tag :msg, :value => params[:msg], :required => '', :id => 'FORM_MSG'
      .row.c
        .col-md-12
          - field_set_tag(:class => 'buttons') do
            = submit_tag 'Отправить', :class => 'btn', :id => "SUBMIT"
  
  - else
    .auth-required{style: "background: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0; text-align: center;"}
      %p{style: "font-size: 16px; margin-bottom: 15px;"}
        = link_to 'Авторизуйтесь', url(:sessions, :new), :style => 'color: #337ab7; text-decoration: none;'
        или 
        = link_to 'зарегистрируйтесь', url(:user_accounts, :new), :style => 'color: #337ab7; text-decoration: none;'
        , чтобы оставить ваш отзыв!

#comments
  = partial 'comment/comment', :collection => @comments
  
-# Лоадер для lazy loading
- if defined?(@has_more) && @has_more
  #comments-loader{style: "text-align: center; padding: 20px; display: none;"}
    .loader-spinner{style: "display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3; border-top: 3px solid #3498db; border-radius: 50%; animation: spin 2s linear infinite;"}
    %p{style: "margin-top: 10px; color: #666;"} Загрузка отзывов...

-# Индикатор окончания
- if defined?(@has_more) && !@has_more && defined?(@page) && @page > 1
  #comments-end{style: "text-align: center; padding: 20px; color: #888;"}
    %p Все отзывы загружены

-# Schema.org Reviews markup for SEO
= generate_reviews_schema(@comments)

:css
  @media only screen and (max-width: 992px) {
    .delivery-lg {
      display: none !important;
      #comment-form > h2 {margin: 24px 0 !important;}
    }
  }
  span.star-rating { padding-top: 12px; }
  
  @media screen and (width <= 1024px) {
    #sidebarrr {display: none;}
  }
  
  /* CSS для ленивой загрузки */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .loader-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 2s linear infinite;
  }
  
  .comments-loading {
    opacity: 0.7;
    pointer-events: none;
  }
  
  .comment-item {
    transition: opacity 0.3s ease-in-out;
  }
  
  .comment-item.fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

:javascript
  $('.feedback').css('display','none');
  
  // reCAPTCHA
  if (typeof grecaptcha !== 'undefined') {
    grecaptcha.ready(function() {
      grecaptcha.execute('6LdUkAIqAAAAAPmW_r2jFaMvjMa8o-kelRM_nKKi', {action: 'submit'}).then(function(token) {
        document.getElementsByName('g-recaptcha-response')[0].value = token;
      });
    });
  }
  
  // Lazy Loading для отзывов
  (function() {
    let currentPage = #{defined?(@page) ? @page.to_i : 1};
    let hasMore = #{defined?(@has_more) ? @has_more.to_json : 'false'};
    let isLoading = false;
    const commentsContainer = document.getElementById('comments');
    const loader = document.getElementById('comments-loader');
    
    // Проверяем, есть ли элементы
    if (!commentsContainer || !hasMore) {
      console.log('Lazy loading не активирован: отсутствуют элементы или нет дополнительных отзывов');
      return;
    }
    
    console.log('Инициализация lazy loading: страница', currentPage, 'есть ещё:', hasMore);
    
    function loadMoreComments() {
      if (isLoading || !hasMore) {
        console.log('Пропуск загрузки: isLoading=' + isLoading + ', hasMore=' + hasMore);
        return;
      }
      
      isLoading = true;
      currentPage++;
      
      console.log('Начинаем загрузку страницы ' + currentPage);
      
      // Пробуем fetch API как основной метод, потом XMLHttpRequest
      if (typeof fetch !== 'undefined') {
        loadWithFetch();
      } else {
        loadWithXHR();
      }
    }
    
    function loadWithFetch() {
      console.log('Используем Fetch API');
      
      const url = '/comment/load_more?page=' + currentPage + '&t=' + Date.now();
      
      fetch(url, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json, text/javascript, */*; q=0.01',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        },
        credentials: 'same-origin'
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        handleSuccessResponse(data);
      })
      .catch(error => {
        console.error('Ошибка Fetch API:', error);
        console.log('Переключаемся на XMLHttpRequest');
        loadWithXHR();
      });
    }
    
    function loadWithXHR() {
      console.log('Используем XMLHttpRequest');
      
      // Показываем лоадер
      if (loader) {
        loader.style.display = 'block';
      }
      
      console.log('Загружаем страницу', currentPage);
      
      // Создаем чистый XMLHttpRequest без вмешательства includes.js
      const NativeXHR = window.XMLHttpRequest;
      const xhr = new NativeXHR();
      xhr.open('GET', '/comment/load_more?page=' + currentPage + '&t=' + Date.now(), true);
      
      // Устанавливаем все необходимые заголовки
      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      xhr.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');
      xhr.setRequestHeader('Cache-Control', 'no-cache');
      xhr.setRequestHeader('Pragma', 'no-cache');
      
      // Таймаут для предотвращения зависания
      xhr.timeout = 15000; // 15 секунд
      
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            try {
              const response = JSON.parse(xhr.responseText);
              handleSuccessResponse(response);
            } catch (e) {
              handleErrorResponse('JSON parsing error: ' + e.message + '. Server response: ' + xhr.responseText);
            }
          } else {
            let errorMsg = 'HTTP Error ' + xhr.status;
            if (xhr.status === 404) {
              errorMsg += ': Endpoint not found. Check /comment/load_more route.';
            } else if (xhr.status === 0) {
              errorMsg += ': Network error or CORS issue.';
            } else {
              errorMsg += ': ' + xhr.statusText;
            }
            handleErrorResponse(errorMsg);
          }
        }
      };
      
      xhr.onerror = function() {
        handleErrorResponse('XMLHttpRequest network error');
      };
      
      xhr.ontimeout = function() {
        handleErrorResponse('XMLHttpRequest timeout after 15 seconds');
      };
      
      xhr.send();
    }
    
    function handleSuccessResponse(response) {
      // Скрываем лоадер
      if (loader) {
        loader.style.display = 'none';
      }
      
      if (response.html && response.html.trim()) {
        // Добавляем новые отзывы
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = response.html;
        
        // Добавляем анимацию появления
        Array.from(tempDiv.children).forEach((child, index) => {
          child.classList.add('comment-item', 'fade-in');
          setTimeout(() => {
            commentsContainer.appendChild(child);
          }, index * 100); // Последовательное появление
        });
        
        console.log('✅ Успешно загружено отзывов:', response.html.split('<article').length - 1);
      } else {
        console.log('⚠️ Пустой ответ от сервера, возможно конец списка');
        hasMore = false;
      }
      
      hasMore = response.has_more;
      
      if (!hasMore) {
        console.log('✅ Все отзывы загружены');
        showEndMessage();
      }
      
      isLoading = false;
    }
    
    function handleErrorResponse(error) {
      console.error('❌ Ошибка загрузки:', error);
      
      // Скрываем лоадер
      if (loader) {
        loader.style.display = 'none';
      }
      
      // Останавливаем lazy loading после ошибок
      hasMore = false;
      isLoading = false;
      
      // Показываем сообщение об ошибке
      const errorDiv = document.createElement('div');
      errorDiv.style.cssText = 'text-align: center; padding: 20px; color: #dc3545; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 4px; margin: 10px 0;';
      errorDiv.innerHTML = '<p>⚠️ Ошибка загрузки дополнительных отзывов</p>';
      commentsContainer.parentNode.appendChild(errorDiv);
    }
    
    function showEndMessage() {
      const endMessage = document.getElementById('comments-end');
      if (endMessage) {
        endMessage.style.display = 'block';
      } else {
        const endDiv = document.createElement('div');
        endDiv.id = 'comments-end';
        endDiv.style.cssText = 'text-align: center; padding: 20px; color: #888;';
        endDiv.innerHTML = '<p>🎉 Все отзывы загружены</p>';
        commentsContainer.parentNode.appendChild(endDiv);
      }
    }
    
    // Отслеживание прокрутки
    function handleScroll() {
      if (isLoading || !hasMore) return;
      
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      // Загружаем, когда осталось 200px до конца
      if (scrollTop + windowHeight >= documentHeight - 200) {
        console.log('Триггер lazy loading при прокрутке');
        loadMoreComments();
      }
    }
    
    // Привязываем обработчик прокрутки
    let scrollTimeout;
    window.addEventListener('scroll', function() {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
      scrollTimeout = setTimeout(handleScroll, 100); // Дебаунс 100мс
    });
    
    // Для отладки - возможность ручной загрузки
    window.loadMoreCommentsManual = loadMoreComments;
  })();

  // Сохранение данных формы в localStorage при отправке
  if (document.getElementById('FORM')) {
    document.getElementById('FORM').addEventListener('submit', function() {
      var msg = document.getElementById('FORM_MSG').value;
      localStorage.setItem('msg', msg);
      var orderId = document.getElementById('FORM_ORDER_ID').value;
      localStorage.setItem('order_eight_digit_id', orderId);
    });
  }

  // Восстановление данных формы из localStorage при загрузке страницы
  document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('FORM_MSG') && localStorage.getItem('msg')) {
      document.getElementById('FORM_MSG').value = localStorage.getItem('msg');
    }
    if (document.getElementById('FORM_ORDER_ID') && localStorage.getItem('order_eight_digit_id')) {
      document.getElementById('FORM_ORDER_ID').value = localStorage.getItem('order_eight_digit_id');
    }
    
    // Проверяем, нужно ли обновить кэш после авторизации
    if (localStorage.getItem('user_just_authenticated') === 'true') {
      localStorage.removeItem('user_just_authenticated');
      // Принудительно перезагружаем страницу с очисткой кэша
      window.location.reload(true); // true = игнорировать кэш
    }
  });
