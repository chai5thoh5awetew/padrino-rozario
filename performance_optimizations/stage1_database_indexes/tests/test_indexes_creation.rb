#!/usr/bin/env ruby
# encoding: utf-8
# –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

require 'rubygems'
require 'bundler/setup'
require_relative '../../../config/boot.rb'
require 'test/unit'

class TestIndexesCreation < Test::Unit::TestCase
  
  def setup
    @critical_indexes = [
      ['smiles', 'idx_smiles_json_order', 'KEY'],
      ['smiles', 'idx_smiles_created_at', 'KEY'],
      ['products', 'idx_products_title', 'KEY'],
      ['products', 'idx_products_header', 'KEY'],
      ['products', 'idx_products_fulltext', 'FULLTEXT'],
      ['categories', 'idx_categories_title', 'KEY']
    ]
    
    @composite_indexes = [
      ['categories_products', 'idx_cat_prod_composite'],
      ['products_tags', 'idx_prod_tag_composite'],
      ['product_complects', 'idx_prod_complect_composite']
    ]
  end
  
  def test_database_connection
    puts "üîç –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    assert_nothing_raised do
      ActiveRecord::Base.connection.execute("SELECT 1")
    end
    
    puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
  end
  
  def test_critical_indexes_exist
    puts "üîç –¢–µ—Å—Ç 2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã"
    
    missing_indexes = []
    
    @critical_indexes.each do |table, index_name, index_type|
      begin
        result = ActiveRecord::Base.connection.execute(
          "SHOW INDEX FROM #{table} WHERE Key_name = '#{index_name}'"
        )
        
        if result.any?
          puts "‚úÖ #{index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ #{table}"
        else
          puts "‚ùå #{index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ #{table} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
          missing_indexes << "#{table}.#{index_name}"
        end
      rescue => e
        puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ #{index_name}: #{e.message}"
        missing_indexes << "#{table}.#{index_name} (error)"
      end
    end
    
    if missing_indexes.empty?
      puts "‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã"
    else
      fail("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã: #{missing_indexes.join(', ')}")
    end
  end
  
  def test_composite_indexes_exist
    puts "üîç –¢–µ—Å—Ç 3: –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã"
    
    missing_indexes = []
    
    @composite_indexes.each do |table, index_name|
      begin
        result = ActiveRecord::Base.connection.execute(
          "SHOW INDEX FROM #{table} WHERE Key_name = '#{index_name}'"
        )
        
        if result.any?
          puts "‚úÖ #{index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ #{table}"
        else
          puts "‚ö†Ô∏è  #{index_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ #{table} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          missing_indexes << "#{table}.#{index_name}"
        end
      rescue => e
        puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ #{index_name}: #{e.message}"
      end
    end
    
    if missing_indexes.empty?
      puts "‚úÖ –í—Å–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã"
    else
      puts "‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: #{missing_indexes.join(', ')}"
    end
  end
  
  def test_fulltext_index_functionality 
    puts "üîç –¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å FULLTEXT –∏–Ω–¥–µ–∫—Å–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FULLTEXT –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if Product.count > 0
      begin
        # –ü—Ä–æ–±—É–µ–º FULLTEXT –ø–æ–∏—Å–∫
        result = ActiveRecord::Base.connection.execute(
          "SELECT COUNT(*) as count FROM products WHERE MATCH(title, header) AGAINST('—Ä–æ–∑–∞' IN BOOLEAN MODE)"
        )
        
        count = result.first['count'] || result.first[0]
        puts "‚úÖ FULLTEXT –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ: #{count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)"
      rescue => e
        puts "‚ö†Ô∏è  FULLTEXT –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: #{e.message}"
        # –ù–µ —Ñ–µ–π–ª–∏–º —Ç–µ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ FULLTEXT –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö MySQL
      end
    else
      puts "‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ FULLTEXT –ø–æ–∏—Å–∫–∞"
    end
  end
  
  def test_index_usage_with_explain
    puts "üîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —á–µ—Ä–µ–∑ EXPLAIN"
    
    test_queries = [
      {
        name: "smiles json_order –ø–æ–∏—Å–∫",
        query: "SELECT * FROM smiles WHERE json_order LIKE '%—Ä–æ–∑–∞%' LIMIT 5",
        expected_key: "idx_smiles_json_order"
      },
      {
        name: "products title –ø–æ–∏—Å–∫",
        query: "SELECT * FROM products WHERE title LIKE '%–±—É–∫–µ—Ç%' LIMIT 5",
        expected_key: "idx_products_title"
      },
      {
        name: "smiles —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
        query: "SELECT * FROM smiles ORDER BY created_at DESC LIMIT 5",
        expected_key: "idx_smiles_created_at"
      }
    ]
    
    test_queries.each do |test_case|
      begin
        explain_result = ActiveRecord::Base.connection.execute("EXPLAIN #{test_case[:query]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        key_used = explain_result.first['key'] || explain_result.first[5]
        
        if key_used && (key_used.include?(test_case[:expected_key]) || key_used.include?('idx_'))
          puts "‚úÖ #{test_case[:name]}: –∏–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (#{key_used})"
        else
          puts "‚ö†Ô∏è  #{test_case[:name]}: –∏–Ω–¥–µ–∫—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (#{key_used})"
        end
      rescue => e
        puts "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ #{test_case[:name]}: #{e.message}"
      end
    end
  end
  
  def test_database_size_impact
    puts "üîç –¢–µ—Å—Ç 6: –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    begin
      size_info = ActiveRecord::Base.connection.execute(
        "SELECT table_name, ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'size_mb', 
                ROUND((index_length / 1024 / 1024), 2) AS 'index_size_mb'
         FROM information_schema.TABLES 
         WHERE table_schema = DATABASE() 
         AND table_name IN ('smiles', 'products', 'categories', 'categories_products', 'products_tags', 'product_complects')"
      )
      
      total_size = 0
      total_index_size = 0
      
      puts "‚ú® –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏:"
      
      size_info.each do |row|
        table_name = row['table_name'] || row[0]
        size_mb = (row['size_mb'] || row[1]).to_f
        index_size_mb = (row['index_size_mb'] || row[2]).to_f
        
        puts "   - #{table_name}: #{size_mb}MB –æ–±—â–∏–π, #{index_size_mb}MB –∏–Ω–¥–µ–∫—Å—ã"
        
        total_size += size_mb
        total_index_size += index_size_mb
      end
      
      index_percentage = total_size > 0 ? (total_index_size / total_size * 100).round(1) : 0
      
      puts "\nüìä –ò—Ç–æ–≥–æ:"
      puts "   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: #{total_size.round(2)}MB"
      puts "   - –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤: #{total_index_size.round(2)}MB"
      puts "   - –î–æ–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤: #{index_percentage}%"
      
      if index_percentage > 50
        puts "‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã –∑–∞–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (>50%)"
      elsif index_percentage > 30
        puts "‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å—ã –∑–∞–Ω–∏–º–∞—é—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞ (#{index_percentage}%)"
      else
        puts "‚úÖ –ò–Ω–¥–µ–∫—Å—ã –∑–∞–Ω–∏–º–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞ (#{index_percentage}%)"
      end
      
    rescue => e
      puts "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ: #{e.message}"
    end
  end
end

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __FILE__ == $0
  puts "üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
  puts "=" * 60
  
  begin
    Test::Unit::AutoRunner.run
  rescue => e
    puts "\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: #{e.message}"
    puts e.backtrace.first(3)
    exit 1
  end
end
