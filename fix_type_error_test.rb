#!/usr/bin/env ruby
# encoding: utf-8

# –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TypeError

puts "=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TypeError ==="

# –°–∏–º—É–ª—è—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ comment —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
class MockComment
  attr_accessor :id, :name, :body, :rating, :published, :order_eight_digit_id, :created_at, :updated_at
  
  def initialize(data)
    data.each { |key, value| send("#{key}=", value) }
  end
end

# –°–∏–º—É–ª—è—Ü–∏—è content_tag helper
def content_tag(tag, content)
  "<#{tag}>#{content}</#{tag}>"
end

# –°–∏–º—É–ª—è—Ü–∏—è truncate_words –∏ strip_tags
def truncate_words(text, limit = 10)
  words = text.to_s.split(' ')
  words.length > limit ? words[0...limit].join(' ') + '...' : text.to_s
end

def strip_tags(text)
  text.to_s.gsub(/<[^>]+>/, '')
end

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
test_comments = [
  MockComment.new(
    id: 1,
    name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
    body: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ü–≤–µ—Ç—ã!",
    rating: 5.0,    # Float - –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–∏–ø
    published: 0,   # –ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
    order_eight_digit_id: 12345678
  ),
  
  MockComment.new(
    id: 2,
    name: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
    body: nil,      # nil - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    rating: 4,      # Integer
    published: 1,   # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
    order_eight_digit_id: nil
  ),
  
  MockComment.new(
    id: 3,
    name: nil,      # nil name - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    body: "–•–æ—Ä–æ—à–∏–µ —Ü–≤–µ—Ç—ã",
    rating: 3.5,    # Float —Å –¥—Ä–æ–±—å—é
    published: 0,
    order_eight_digit_id: 87654321
  )
]

def test_comment_display(comment)
  puts "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID: #{comment.id}"
  
  is_published = comment.published == 1
  
  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É name
  begin
    name_result = is_published ? comment.name : content_tag(:strong, comment.name.to_s)
    puts "  ‚úÖ Name: #{name_result}"
  rescue => e
    puts "  ‚ùå Name Error: #{e.message}"
  end
  
  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É body
  begin
    body_text = truncate_words(strip_tags(comment.body.to_s))
    body_result = is_published ? body_text : content_tag(:strong, body_text.to_s)
    puts "  ‚úÖ Body: #{body_result}"
  rescue => e
    puts "  ‚ùå Body Error: #{e.message}"
  end
  
  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É rating
  begin
    rating_result = is_published ? comment.rating : content_tag(:strong, comment.rating.to_s)
    puts "  ‚úÖ Rating: #{rating_result}"
  rescue => e
    puts "  ‚ùå Rating Error: #{e.message}"
  end
  
  puts "  –ü—É–±–ª–∏–∫–∞—Ü–∏—è: #{is_published ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'}"
  puts "---"
end

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
test_comments.each { |comment| test_comment_display(comment) }

puts "=== –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–û–ô –û–®–ò–ë–ö–ò ==="
puts

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
float_rating = 4.5
int_rating = 5
nil_rating = nil

puts "–¢–µ—Å—Ç content_tag —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:"

# –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥)
puts "\n–î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É):"
begin
  # –≠—Ç–æ –±—ã –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É TypeError
  # result = content_tag(:strong, float_rating)  # –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ç–µ—Å—Ç
  puts "  ‚ùå –ú–æ–≥–ª–∞ –±—ã –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å TypeError: no implicit conversion of Float into String"
rescue TypeError => e
  puts "  ‚ùå –û—à–∏–±–∫–∞: #{e.message}"
end

# –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–∞–±–æ—á–∏–π –∫–æ–¥)
puts "\n–ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
test_values = [
  { value: float_rating, type: 'Float' },
  { value: int_rating, type: 'Integer' },
  { value: nil_rating, type: 'nil' }
]

test_values.each do |test|
  begin
    result = content_tag(:strong, test[:value].to_s)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
    puts "  ‚úÖ #{test[:type]} (#{test[:value].inspect}) -> #{result}"
  rescue => e
    puts "  ‚ùå #{test[:type]} Error: #{e.message}"
  end
end

puts "\n=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ==="
puts "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .to_s —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É TypeError"
puts "‚úÖ –õ—é–±—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (Float, Integer, nil) —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç"
puts "‚úÖ content_tag –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª"

puts "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéÜ"
